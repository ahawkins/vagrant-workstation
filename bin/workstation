#!/usr/bin/env bash

set -eou pipefail

# NOTE: This little dance gets around the shellcheck warning of using
# declare along with $() since it hides exit codes.
declare workstation_root
workstation_root="$(cd "$(dirname "${0}")/.."; pwd)"

declare -r WORKSTATION_ROOT="${workstation_root}"
declare -r DATA_DIR="${XDG_DATA_HOME:-${HOME}/.local/share}/workstation"

unset workstation_root

version() {
	echo "Workstation $(cat "${WORKSTATION_ROOT}/VERSION")"
}

usage() {
	version
	echo
	echo "Usage: "$(basename "${0}")" <command> [OPTIONS]"
	echo
	echo "Run "$(basename "${0}")" --help for full details"
}

help() {
	man "${WORKSTATION_ROOT}/man/dist/workstation.man1"
}

vagrant_up() {
	local OPTIND

	declare project_path vm_name vagrant_file

	while getopts ':p:n:v:' opt; do
		case "${opt}" in
			p)
				project_path="${OPTARG}"
				;;
			v)
				vagrant_file="${OPTARG}"
				;;
			n)
				vm_name="${OPTARG}"
				;;
			\?)
				usage 1>&2
				return 1
				;;
			:)
				usage 1>&2
				return 1
				;;
		esac
	done
	shift $((OPTIND-1))

	if [ -z "${project_path}" ] || [ -z "${vm_name}" ] || [ -z "${vagrant_file}" ]; then
		usage 1>&2
		return 1
	fi

	if [ ! -d "${project_path}" ]; then
		echo "${project_path} not a directory" 1>&2
		return 1
	fi

	if [ ! -f "${vagrant_file}" ]; then
		echo "${vagrant_file} does not exist" 1>&2
		return 1
	fi

	if [ -d "${DATA_DIR}/${vm_name}" ]; then
		echo "${vm_name} already exists. Destroy the existing VM or choose a new name." 1>&2
		return 1
	fi

	mkdir -p "${DATA_DIR}/${vm_name}"
	echo "${project_path}" > "${DATA_DIR}/${vm_name}/project_path"
	echo "${vagrant_file}" > "${DATA_DIR}/${vm_name}/vagrant_file"

	echo "Using VAGRANTFILE: ${vagrant_file}"

	export "WORKSTATION_PROJECT_PATH=${project_path}"
	export "VAGRANT_CWD=$(dirname "${vagrant_file}")"

	vagrant up "$@"
	vagrant ssh-config > "${DATA_DIR}/${vm_name}/ssh_config"

	mkdir -p "${project_path}/.workstation"
	mkdir -p "${project_path}/.workstation/commands"
	echo "${vm_name}" > "${project_path}/.workstation/name"

	echo "Booted workstation ${vm_name} for projects in ${project_path}"
}

lookup_vm_name() {
	declare cwd="${1}" vm_name

	while [ ! -f "${cwd}/.workstation/name" ] && [ "$cwd" != / ]; do
		cwd="$(dirname "$cwd")"
	done

	if [ "${cwd}" != / ]; then
		cat "${cwd}/.workstation/name"
	fi
}

vagrant_wrapper() {
	declare vm_name="${WORKSTATION_NAME:-}" vagrant_file project_path

	if [ -z "${vm_name}" ]; then
		vm_name="$(lookup_vm_name "${PWD}")"
	fi

	if [ -z "${vm_name}" ]; then
		echo "No workstation name provided. Set WORKSTATION_NAME or change directory." 1>&2
		return 3
	fi

	if [ -d "${DATA_DIR}/${vm_name}" ]; then
		project_path="$(cat "${DATA_DIR}/${vm_name}/project_path")"
		vagrant_file="$(cat "${DATA_DIR}/${vm_name}/vagrant_file")"

		export "WORKSTATION_PROJECT_PATH=${project_path}"
		export "VAGRANT_CWD=$(dirname "${vagrant_file}")"
		export "WORKSTATION_NAME=${vm_name}"

		vagrant "$@"
	else
		echo "${vm_name} not provisioned. Run $(basename "${0}") up" 1>&2
		return 1
	fi
}

run_command() {
	declare vm_name="${WORKSTATION_NAME:-}" project_path cwd="${PWD}" project ssh_config

	if [ -z "${vm_name}" ]; then
		vm_name="$(lookup_vm_name "${PWD}")"
	fi

	if [ -z "${vm_name}" ]; then
		echo "No workstation name provided. Set WORKSTATION_NAME or change directory." 1>&2
		return 3
	fi

	if [ ! -d "${DATA_DIR}/${vm_name}" ]; then
		echo "${vm_name} not provisioned. Run $(basename "${0}") up" 1>&2
		return 1
	fi

	project_path="$(cat "${DATA_DIR}/${vm_name}/project_path")"
	ssh_config="${DATA_DIR}/${vm_name}/ssh_config"

	while [ "$(dirname "${cwd}")" != "${project_path}" ] && [ "${cwd}" != / ]; do
		cwd="$(dirname "${cwd}")"
	done

	if [ "${cwd}" != / ]; then
		project="$(basename "${cwd}")"
	fi

	if [ -z "${project}" ]; then
		echo "Cannot determine project from ${PWD}. Change directory." 1>&2
		return 1
	fi

	if ! ssh -q -F "${ssh_config}" default true; then
		echo "SSH config stale. Run reload and try again." 1>&2
		return 5
	fi

	#shellcheck disable=SC2145
	exec \
		ssh -v -t -t -q -F \
		"${ssh_config}" default \
		-- "cd '/projects/${project}' && bash -l -c '$@'"
}

identify_alias() {
	declare vm_name="${WORKSTATION_NAME:-}" cwd="${PWD}" name="${1}" project_path

	if [ -z "${vm_name}" ]; then
		vm_name="$(lookup_vm_name "${PWD}")"
	fi

	if [ -z "${vm_name}" ]; then
		return 0
	fi

	project_path="$(cat "${DATA_DIR}/${vm_name}/project_path")"

	if [ -f "${project_path}/.workstation/commands/${name}" ]; then
		cat "${project_path}/.workstation/commands/${name}"
	fi
}

wildcard_command() {
	declare command_alias

	if [ -n "${1:-}" ] && [ -n "$(identify_alias "${1}")" ]; then
		command_alias="$(identify_alias "${1}")"

		shift

		run_command "${command_alias}" "$@"
	else
		usage 1>&2
		return 1
	fi
}

case "${1:-}" in
	up)
		shift

		vagrant_up "$@"
		;;
	run)
		shift

		run_command "$@"
		;;
	reload)
		vagrant_wrapper "$@"
		vagrant ssh-config > "${DATA_DIR}/${WORKSTATION_NAME}/ssh_config"

		;;
	destroy)
		vagrant_wrapper "$@"

		rm -rf "${DATA_DIR:?}/${WORKSTATION_NAME}"

		;;
	halt|provision|status|snapshot|suspend|ssh-config|ssh)
		vagrant_wrapper "$@"

		;;
	version|--version)
		version

		;;
	help|--help)
		help

		;;
	*)
		wildcard_command "$@"

		;;
esac
