#!/usr/bin/env bash

set -eou pipefail

declare -r WORKSTATION_ROOT=$(cd "${API_SANDBOX_DIR:-"$(dirname $0)/.."}"; pwd)

declare -r DATA_DIR="${WORKSTATION_HOME:-${HOME}/.workstation}"
declare -r VAGRANTFILE="${WORKSTATION_VAGRANTFILE:-}"

version() {
	echo "Workstation $(cat "${WORKSTATION_ROOT}/VERSION")"
}

usage() {
	version
	echo
	echo "Usage: workstation <command> [OPTIONS]"
}

help() {
	usage
	echo
	cat "${WORKSTATION_ROOT}/HELP"
}

subcommand="${1:-}"

case "$subcommand" in
	up)
		if [ -z "$VAGRANTFILE" ] || [ ! -f "$VAGRANTFILE" ]; then
			echo "No VAGRANTFILE found at WORKSTATION_VAGRANTFILE" 1>&2;
			exit 1
		fi

		project_path="${2:-}"

		if [ -z "$project_path" ]; then
			echo "PROJECT_PATH missing" 1>&2
			exit 1
		fi

		if [ ! -d "$project_path" ]; then
			echo "${project_path} not a directory" 1>&2
			exit 1
		fi

		shift ; shift

		mkdir -p "$DATA_DIR"
		echo "$project_path" > "${DATA_DIR}/project_path"

		echo "Using VAGRANTFILE: ${VAGRANTFILE}"

		export WORKSTATION_PROJECT_PATH="$project_path"

		pushd "$(dirname "$VAGRANTFILE")" > /dev/null

		vagrant up "$@"
		vagrant ssh-config > "${DATA_DIR}/ssh_config"

		popd > /dev/null

		echo "Booted workstation for projects in ${project_path}"

		;;
	run)
		shift

		ssh_config="${DATA_DIR}/ssh_config"

		if [ ! -f "$ssh_config" ]; then
			echo "No SSH config. Run boot and try again." 1>&2
			exit 1
		fi

		project_path=$(cat "${DATA_DIR}/project_path")
		project=

		while getopts ":p:" opt; do
			case $opt in
				p)
					matches=$(find "$project_path" -type d -maxdepth 1 -name "*$OPTARG*")

					if [ $(echo "$matches" | wc -l) -eq 1 ]; then
						project="$(basename "$matches")"
					else
						echo "${OPTARG} matched too many projects:" 2>&1
						echo "$matches" 2>&1
						exit 1
					fi
					;;
				\?)
					echo "Invalid option: -$OPTARG" 1>&2
					exit 1
					;;
			esac
		done

		shift $((OPTIND-1))

		if [ $# -eq 0 ]; then
			echo "No command given" 1>&2
			exit 1
		fi

		if [ -z "$project" ]; then
			cwd=$PWD
			while [ "$(dirname $cwd)" != "$project_path" ] && [ "$cwd" != / ]; do
				cwd="$(dirname "$cwd")"
			done

			if [ "$cwd" != / ]; then
				project="$(basename "$cwd")"
			fi
		fi

		if [ -z "$project" ]; then
			echo "Cannot determine project for ${PWD}. Provide -p PROJECT or change directory." 1>&2
			exit 1
		fi

		if ! ssh -q -F "$ssh_config" default true; then
			echo "SSH config stale. Run reload and try again." 1>&2
			exit 1
		fi

		internal_directory="/projects/${project}"
		exec ssh -t -t -q -F "$ssh_config" default -- "cd ${internal_directory} && bash -l -c '$@'"

		;;
	reload)
		if [ -z "$VAGRANTFILE" ] || [ ! -f "$VAGRANTFILE" ]; then
			echo "No VAGRANTFILE found at WORKSTATION_VAGRANTFILE" 1>&2
			exit 1
		fi

		if [ ! -e "${DATA_DIR}/project_path" ]; then
			echo "Workstation not booted. Run the up command and try again" 1>&2
			exit 1
		fi

		export VAGRANT_CWD="$(dirname "$VAGRANTFILE")"
		export WORKSTATION_PROJECT_PATH="$(cat "${DATA_DIR}/project_path")"

		vagrant reload
		vagrant ssh-config > "${DATA_DIR}/ssh_config"

		;;
	destroy)
		if [ -z "$VAGRANTFILE" ] || [ ! -f "$VAGRANTFILE" ]; then
			echo "No VAGRANTFILE found at WORKSTATION_VAGRANTFILE" 1>&2;
			exit 1
		fi

		export VAGRANT_CWD="$(dirname "$VAGRANTFILE")"

		vagrant $@

		rm -rf "${DATA_DIR}/ssh_config"
		rm -rf "${DATA_DIR}/project_path"

		;;
	halt|suspend|status|ssh-config|ssh)
		if [ -z "$VAGRANTFILE" ] || [ ! -f "$VAGRANTFILE" ]; then
			echo "No VAGRANTFILE found at WORKSTATION_VAGRANTFILE" 1>&2;
			exit 1
		fi

		export VAGRANT_CWD="$(dirname "$VAGRANTFILE")"

		exec vagrant $@

		;;

	provision)
		if [ -z "$VAGRANTFILE" ] || [ ! -f "$VAGRANTFILE" ]; then
			echo "No VAGRANTFILE found at WORKSTATION_VAGRANTFILE" 1>&2;
			exit 1
		fi

		cd "$(dirname "$VAGRANTFILE")"

		exec vagrant provision

		;;
	version|--version)
		version

		;;
	help|--help)
		help

		;;
	*)
		if [ -n "${subcommand}" ] && [ -e "${DATA_DIR}/commands/${1}" ]; then
			shift

			project=

			while getopts ":p:" opt; do
				case $opt in
					p)
						project="-p ${OPTARG}"
						;;
					\?)
						echo "Invalid option: -$OPTARG" 1>&2
						exit 1
						;;
				esac
			done

			shift $((OPTIND-1))

			exec $0 run "$project" "$(cat "${DATA_DIR}/commands/${subcommand}")" $@
		elif [ -n "$subcommand" ] && [ -e "${DATA_DIR}/project_path" ]; then
			project_path="$(cat "${DATA_DIR}/project_path")"

			if [ -e "${project_path}/.workstation/commands/${1}" ]; then
				shift

				project=

				while getopts ":p:" opt; do
					case $opt in
						p)
							project="-p ${OPTARG}"
							;;
						\?)
							echo "Invalid option: -$OPTARG" 1>&2
							exit 1
							;;
					esac
				done

				shift $((OPTIND-1))

				exec $0 run "$project" "$(cat "${project_path}/.workstation/commands/${subcommand}")" $@
			else
				usage
				exit 1
			fi
		else
			usage
			exit 1
		fi

		;;
esac
